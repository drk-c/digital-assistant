 // Function to add a task to a specific list
    const addTaskToList = (listName, taskTitle, taskDate, taskTime, taskDescription) => {
        const listCard = document.querySelector(`.list-card[data-list-name="${listName}"]`);
        const taskList = listCard.querySelector(".task-list");

        // Create a new task item
        const taskItem = document.createElement("li");
        taskItem.className = "task-item";
        if (completed) {
            taskItem.classList.add("completed");
        }

        taskItem.innerHTML = `
            <div class="task-main">
                <input type="checkbox" class="task-checkbox" ${completed ? "checked" : ""} />
                <div>
                    <strong>${taskTitle}</strong>
                    ${taskDate || taskTime ? `<br><small>${taskDate || ""} ${taskTime || ""}</small>` : ""}
                    ${taskDescription ? `<p>${taskDescription}</p>` : ""}
                </div>
            </div>
            <button class="delete-task-button">üóëÔ∏è  </button>
        `;

        taskList.appendChild(taskItem);

        const checkbox = taskItem.querySelector(".task-checkbox");
        checkbox.addEventListener("change", () => {
            if (checkbox.checked) {
                taskItem.classList.add("completed");
            } else {
                taskItem.classList.remove("completed");
            }
            saveTasksToLocalStorage();
        });

        const deleteButton = taskItem.querySelector(".delete-task-button");
        deleteButton.addEventListener("click", () => {
            taskItem.remove();
            saveTasksToLocalStorage();
        });

        saveTasksToLocalStorage();


//CODE FOR LABELS STARTS HERE//

        // Add event listeners for the dropdown
        const dropdownToggle = taskItem.querySelector(".dropdown-toggle");
        const dropdownMenu = taskItem.querySelector(".dropdown");

        dropdownToggle.addEventListener("click", () => {
            dropdownMenu.classList.toggle("hidden");
        });

        //Not included in Git: Add event listener for "Add Label"
        const addLabelButton = taskItem.querySelector(".add-label");
        addLabelButton.addEventListener("click", () => openLabelModal(taskItem));
    };

    // Open a modal to add a label
    const openLabelModal = (taskItem) => {
        const labelModal = document.createElement("div");
        labelModal.className = "modal";
        labelModal.innerHTML = `
            <div class="modal-content">
                <span class="close-button">&times;</span>
                <h3>Add Label</h3>
                <input type="text" id="label-title" placeholder="Label Title" />
                <div class="color-options">
                    <button class="color-button" data-color="#ade4df" style="background-color: #ade4df;"></button>
                    <button class="color-button" data-color="#e4e49c" style="background-color: #e4e49c;"></button>
                    <button class="color-button" data-color="#e19ce4" style="background-color: #e19ce4;"></button>
                    <button class="color-button" data-color="#e4b49c" style="background-color: #e4b49c;"></button>
                </div>
                <button id="save-label">Save Label</button>
            </div>
        `;

        document.body.appendChild(labelModal);

        // Close modal
        const closeModalButton = labelModal.querySelector(".close-button");
        closeModalButton.addEventListener("click", () => {
            labelModal.remove();
        });

        // Save label
        const saveLabelButton = labelModal.querySelector("#save-label");
        saveLabelButton.addEventListener("click", () => {
            const labelTitle = labelModal.querySelector("#label-title").value.trim();
            const selectedColor = labelModal.querySelector(".color-button.selected");

            if (labelTitle && selectedColor) {
                const label = document.createElement("span");
                label.className = "task-label";
                label.textContent = labelTitle;
                label.style.backgroundColor = selectedColor.dataset.color;

                taskItem.querySelector("div").appendChild(label);
                labelModal.remove();
            } else {
                alert("Please provide a label title and select a color.");
            }
        });

        // Handle color selection
        const colorButtons = labelModal.querySelectorAll(".color-button");
        colorButtons.forEach((button) => {
            button.addEventListener("click", () => {
                colorButtons.forEach((btn) => btn.classList.remove("selected"));
                button.classList.add("selected");
            });
        });
    };

